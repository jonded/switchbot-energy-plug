substitutions:
  voltage_divider: "1476"
  current_resistor: "0.001021"
  current_multiply: "0.8815"
  name: "switchbot-energy-plug"
  friendly_name: "Switchbot Energy Plug"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  platformio_options:
    board_build.mcu: esp32c3
    board_build.variant: esp32c3
  project:
    name: esphome.project-template
    version: "1.0"  

esp32:
  variant: ESP32C3
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: y
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"    

## DO NOT ADD MQTT and API Encryption in this plug - one user reported bootlooping issues in this combination

logger:
api:
  # fixes boot loop issues in esphome 12.5+
  on_client_connected:
    - esp32_ble_tracker.start_scan:
        continuous: true
  on_client_disconnected:
    - esp32_ble_tracker.stop_scan:
ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://jonded/switchbot-energy-plug/switchbot-energy-plug.yaml@v6
  import_full_config: true # or true

button:
  - platform: safe_mode
    name: (Safe Mode)

wifi:
  # Set up a wifi access point
  ap:
    password: "12345678"

captive_portal:



## DO NOT ADD MQTT

#  Disable the bluetooth tracker/proxy if they are not needed
esp32_ble_tracker:
  scan_parameters:
# Adjust timing if the defaults do not work in your environment
#    interval: 1100ms
#    window: 1100ms
    active: true
    continuous: false # fixes boot loop issues in esphome 12.5+

bluetooth_proxy:
  active: true



sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO20
      inverted: true
    cf_pin: GPIO18
    cf1_pin: GPIO19
    model: BL0937
    current_resistor: ${current_resistor}
    voltage_divider: ${voltage_divider}
    current:
      name: ${friendly_name} Current
      unit_of_measurement: A
      filters:
        - multiply: ${current_multiply}
    voltage:
      name: ${friendly_name} Voltage
      unit_of_measurement: V
    power:
      name: ${friendly_name} Power
      accuracy_decimals: 1
      unit_of_measurement: W
      id: wattage       
    energy:
      name: Energy
    update_interval: 2s
    change_mode_every: 4

  # Reports how long the device has been powered (in minutes)
  - platform: uptime
    name: ${friendly_name} Uptime
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes
  
  # Reports the WiFi signal strength
  - platform: wifi_signal
    name: ${friendly_name} Wifi Signal
    update_interval: 60s
  
  # Reports the total Power so-far each day, resets at midnight, see https://esphome.io/components/sensor/total_daily_energy.html
  - platform: total_daily_energy
    name: ${friendly_name} Total Daily Energy
    power_id: wattage
    filters:
      - multiply: 0.001 ## convert Wh to kWh
    unit_of_measurement: kWh

switch:
  - platform: gpio
    name: ${friendly_name} Relay
    id: relay
    device_class: outlet
    pin: GPIO6
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - light.turn_on: white_led
    on_turn_off:
      then:
        - light.turn_off: white_led  

# Enable time component for use by daily power sensor
time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: gpio
    device_class: power
    internal: true
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: true
    name: ${friendly_name} Button
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - switch.toggle: relay 
  # Reports if this device is Connected or not
  - platform: status
    name: ${friendly_name} Status

output:
  - platform: ledc
    id: white_output
    pin: GPIO07
    frequency: 19531Hz
  - platform: ledc
    id: blue_output
    pin: GPIO08
    frequency: 19531Hz

light:
  - platform: monochromatic
    name: ${friendly_name} White LED
    output: white_output
    id: white_led
    restore_mode: ALWAYS_OFF #Start with light off after reboot/power-loss event.
    #RESTORE_DEFAULT_OFF (Default) - Attempt to restore state and default to OFF if not possible to restore. Uses flash write cycles.
    #RESTORE_DEFAULT_ON - Attempt to restore state and default to ON. Uses flash write cycles.
    #ALWAYS_OFF - Always initialize the pin as OFF on bootup. Does not use flash write cycles.
    #ALWAYS_ON - Always initialize the pin as ON on bootup. Does not use flash write cycles.
    effects:
      - strobe:
      - flicker:
          alpha: 50% #The percentage that the last color value should affect the light. More or less the “forget-factor” of an exponential moving average. Defaults to 95%.
          intensity: 50% #The intensity of the flickering, basically the maximum amplitude of the random offsets. Defaults to 1.5%.
      - lambda:
          name: Throb
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(white_led).turn_on();
            // Transtion of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_brightness(1.0);
            } else {
              call.set_brightness(0.01);
            }
            call.perform();
            state += 1;
            if (state == 2)
              state = 0;
  - platform: monochromatic
    name: ${friendly_name} Blue LED
    output: blue_output
    id: blue_led
    restore_mode: ALWAYS_OFF #Start with light off after reboot/power-loss event.
    #RESTORE_DEFAULT_OFF (Default) - Attempt to restore state and default to OFF if not possible to restore. Uses flash write cycles.
    #RESTORE_DEFAULT_ON - Attempt to restore state and default to ON. Uses flash write cycles.
    #ALWAYS_OFF - Always initialize the pin as OFF on bootup. Does not use flash write cycles.
    #ALWAYS_ON - Always initialize the pin as ON on bootup. Does not use flash write cycles.
    effects:
      - strobe:
      - flicker:
          alpha: 50% #The percentage that the last color value should affect the light. More or less the “forget-factor” of an exponential moving average. Defaults to 95%.
          intensity: 50% #The intensity of the flickering, basically the maximum amplitude of the random offsets. Defaults to 1.5%.
      - lambda:
          name: Throb
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(blue_led).turn_on();
            // Transtion of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_brightness(1.0);
            } else {
              call.set_brightness(0.01);
            }
            call.perform();
            state += 1;
            if (state == 2)
              state = 0;




# Blink the red light if we aren't connected to WiFi. Could use https://esphome.io/components/status_led.html instead but then we couldn't use the red light for other things as well.
interval:
  - interval: 500ms
    then:
      - if:
          condition:
            not:
              wifi.connected:
          then:
            - light.turn_on:
                id: white_led
                brightness: 100%
                transition_length: 0s
            - delay: 250ms
            - light.turn_off:
                id: white_led
                transition_length: 250ms